---
kind: pipeline
name: default
type: kubernetes

environment:
  APP_NAME: refugee-loan
  PROD_ENV: sas-ril-prod
  STG_ENV: sas-ril-stg
  UAT_ENV: sas-ril-uat
  BRANCH_ENV: sas-ril-branch
  PRODUCTION_URL: www.apply-for-refugee-integration-loan.homeoffice.gov.uk
  IMAGE_URL: 340268328991.dkr.ecr.eu-west-2.amazonaws.com
  IMAGE_REPO: sas/refugee-integration-loans
  GIT_REPO: cto/refugee-integration-loans
  NON_PROD_AVAILABILITY: Mon-Fri 07:00-21:00 Europe/London

steps:
  - name: setup
    pull: if-not-exists
    image: node:14
    environment:
      NOTIFY_KEY: USE_MOCK
    commands:
      - npm install
      - npm run build
    when:
      event: push

  - name: linting
    pull: if-not-exists
    image: node:14
    environment:
      NOTIFY_KEY: USE_MOCK
    commands:
      - npm run test:lint
    when:
      event: push

  - name: unit
    pull: if-not-exists
    image: node:14
    environment:
      NOTIFY_KEY: USE_MOCK
    commands:
      - npm run test:unit
    when:
      event: push

  - name: integration
    pull: if-not-exists
    image: node:14
    environment:
      NOTIFY_KEY: USE_MOCK
    commands:
      - npm run test:integration
    when:
      event: push

  - name: accessibility
    pull: if-not-exists
    image: buildkite/puppeteer:8.0.0
    environment:
      NOTIFY_KEY: USE_MOCK
      ENVIRONMENT: DRONE
    volumes:
      - name: dockersock
        path: /root/.dockersock
    commands:
      - npm run test:accessibility
    when:
      event: push

  - name: audit
    pull: if-not-exists
    image: node:14
    environment:
      NOTIFY_KEY: USE_MOCK
    commands:
      - npm run test:audit
    when:
      event: push

  - name: build
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    commands:
      # wait for docker service to be up before running docker build
      - n=0; while [ "$n" -lt 60 ] && [ ! docker stats --no-stream ]; do n=$(( n + 1 )); sleep 1; done
      - docker build -t $${IMAGE_REPO}:$${DRONE_COMMIT_SHA} .
    volumes:
      - name: dockersock
        path: /var/run
    when:
      branch:
        exclude:
          - feature/*
          - snyk-fix-*
          - dependabot/*
      event: push

  - name: sonar-scanner
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/sonar-scanner-node:6a03c77c7e1bad005893cdcc9cd3d99479b79d5c
    detach: true
    settings:
      failure: ignore
    when:
      branch:
        exclude:
          - feature/*
          - snyk-fix-*
          - dependabot/*
      event: push

  - name: anchore-scan
    image: docker.digital.homeoffice.gov.uk/acp-anchore-submission:latest
    detach: true
    environment:
      IMAGE_NAME: sas/refugee-integration-loans:${DRONE_COMMIT_SHA}
      SERVICE_URL: http://anchore-submission-server:10080
      LOCAL_IMAGE: true
      TOLERATE: medium
      FAIL_ON_DETECTION: false
    when:
      branch:
        exclude:
          - feature/*
          - snyk-fix-*
          - dependabot/*
      event: push

  - name: create_artefact
    image: plugins/ecr
    settings:
      access_key:
        from_secret: aws_access_key_id
      secret_key:
        from_secret: aws_secret_access_key
      region: eu-west-2
      repo: sas/refugee-integration-loans
      registry: 340268328991.dkr.ecr.eu-west-2.amazonaws.com
      tags:
        - latest_${DRONE_BRANCH}
        - ${DRONE_COMMIT_SHA}
    when:
      branch:
        exclude:
          - feature/*
          - snyk-fix-*
          - dependabot/*
      event: push

  - name: deploy_to_branch
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER: https://kube-api-notprod.notprod.acp.homeoffice.gov.uk
      KUBE_TOKEN_RIL_ACP_NOTPROD:
        from_secret: kube_token_ril_acp_notprod
    commands:
      - export KUBE_TOKEN=$${KUBE_TOKEN_RIL_ACP_NOTPROD}
      - export KUBE_NAMESPACE=$${BRANCH_ENV}
      - kd --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yml -f kube/redis-network-policy.yml -f kube/redis-deployment.yml
      - kd --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-internal.yaml -f kube/networkpolicy-internal.yaml -f kube/service.yaml
      - kd --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
      - echo "UAT Branch - $${APP_NAME}-$${DRONE_SOURCE_BRANCH}.branch.internal.sas-notprod.homeoffice.gov.uk"
    when:
      branch:
        exclude:
          - feature/*
          - master
          - snyk-fix-*
          - dependabot/*
      event: push

  - name: deploy_to_uat
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER: https://kube-api-notprod.notprod.acp.homeoffice.gov.uk
      KUBE_TOKEN_RIL_ACP_NOTPROD:
        from_secret: kube_token_ril_acp_notprod
    commands:
      - export KUBE_TOKEN=$${KUBE_TOKEN_RIL_ACP_NOTPROD}
      - export KUBE_NAMESPACE=$${UAT_ENV}
      - kd --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yml -f kube/redis-network-policy.yml -f kube/redis-deployment.yml
      - kd --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-internal.yaml -f kube/networkpolicy-internal.yaml -f kube/service.yaml
      - kd --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
    when:
      branch: master
      event: push

  - name: get_pr_branch
    pull: if-not-exists
    image: drone/cli:alpine
    environment:
      DRONE_SERVER:
        from_secret: drone_server
      DRONE_TOKEN:
        from_secret: drone_token
    volumes:
      - name: dockersock
        path: /root/.dockersock
    commands:
      - drone build info $GIT_REPO $DRONE_BUILD_NUMBER --format {{.Message}} | grep -o " '.*' " | tr -d "[ ']" > /root/.dockersock/branch_name.txt
    when:
      branch: master
      event: push

  - name: tear_down_branch
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER: https://kube-api-notprod.notprod.acp.homeoffice.gov.uk
      KUBE_TOKEN_RIL_ACP_NOTPROD:
        from_secret: kube_token_ril_acp_notprod
    volumes:
      - name: dockersock
        path: /root/.dockersock
    commands:
      - export KUBE_TOKEN=$${KUBE_TOKEN_RIL_ACP_NOTPROD}
      - export KUBE_NAMESPACE=$${BRANCH_ENV}
      - export DRONE_SOURCE_BRANCH=$(cat /root/.dockersock/branch_name.txt)
      - kubectl="kubectl --insecure-skip-tls-verify --server=$${KUBE_SERVER} --namespace=$${KUBE_NAMESPACE} --token=$${KUBE_TOKEN}"
      - kd --delete --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yml -f kube/redis-network-policy.yml -f kube/redis-deployment.yml
      - kd --delete --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-internal.yaml -f kube/networkpolicy-internal.yaml -f kube/service.yaml
      - kd --delete --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
      - $${kubectl} delete secret $${APP_NAME}-internal-$${DRONE_SOURCE_BRANCH} --ignore-not-found=true
      - echo "Torn Down UAT Branch - $${APP_NAME}-$${DRONE_SOURCE_BRANCH}.branch.internal.sas-notprod.homeoffice.gov.uk"
    when:
      branch: master
      event: push

  - name: deploy_to_stg
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER: https://kube-api-prod.prod.acp.homeoffice.gov.uk
      KUBE_TOKEN_RIL_ACP_PROD:
        from_secret: kube_token_ril_acp_prod
    commands:
      - export KUBE_TOKEN=$${KUBE_TOKEN_RIL_ACP_PROD}
      - export KUBE_NAMESPACE=$${STG_ENV}
      - kd --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yml -f kube/redis-network-policy.yml -f kube/redis-deployment.yml
      - kd --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-internal.yaml -f kube/networkpolicy-internal.yaml -f kube/service.yaml
      - kd --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
    when:
      branch: master
      event: push

  - name: get_parent_build
    pull: if-not-exists
    image: drone/cli:alpine
    environment:
      DRONE_SERVER:
        from_secret: drone_server
      DRONE_TOKEN:
        from_secret: drone_token
    commands:
      - ./sanity_check_build.sh
    when:
      target: PROD
      event: promote

  - name: deploy_to_prod
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER: https://kube-api-prod.prod.acp.homeoffice.gov.uk
      KUBE_TOKEN_RIL_ACP_PROD:
        from_secret: kube_token_ril_acp_prod
    commands:
      - export KUBE_TOKEN=$${KUBE_TOKEN_RIL_ACP_PROD}
      - export KUBE_NAMESPACE=$${PROD_ENV}
      - kd --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yml -f kube/redis-network-policy.yml -f kube/redis-deployment.yml
      - kd --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-external.yaml -f kube/networkpolicy-external.yaml -f kube/service.yaml
      - kd --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
    when:
      target: PROD
      event: promote

  - name: cron_tear_down
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER: https://kube-api-notprod.notprod.acp.homeoffice.gov.uk
      KUBE_TOKEN_RIL_ACP_NOTPROD:
        from_secret: kube_token_ril_acp_notprod
    commands:
      - export KUBE_TOKEN=$${KUBE_TOKEN_RIL_ACP_NOTPROD}
      - export KUBE_NAMESPACE=$${BRANCH_ENV}
      - ./clean_up.sh
    when:
      cron: tear_down_pr_envs
      event: cron

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind

  - name: anchore-submission-server
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
    pull: always
    commands:
      - /run.sh server
    environment:
      ANCHORE_URL: "acp-anchore.acp.homeoffice.gov.uk"
      REGISTRY_URL: "acp-ephemeral-registry.acp.homeoffice.gov.uk"

  - name: session
    image: redis
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}

...
